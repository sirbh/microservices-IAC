{
	"info": {
		"_postman_id": "1d4d77d5-9ba3-40ce-a228-9209ad49bc1b",
		"name": "DevopsProject",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17009990"
	},
	"item": [
		{
			"name": "Get Messages From Gateway",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Should contain logs\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.logs).to.have.length.above(0);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8083/messages",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8083",
					"path": [
						"messages"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set State to INIT",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"\r",
							"  const stateChangeTime =  new Date().toISOString().match(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/)[0]\r",
							"\r",
							"  const request = {\r",
							"    url: \"http://localhost:8083/messages\",\r",
							"    method: \"get\",\r",
							"  };\r",
							"\r",
							"  setTimeout(()=>{\r",
							"    pm.sendRequest(request, function (err, response) {\r",
							"    if (err) {\r",
							"      console.error(err);\r",
							"      return;\r",
							"    }\r",
							"    console.log(response.json().logs[response.json().logs.length-1])\r",
							"    const logsAfterCurrentTime = response.json().logs.filter((log) => {\r",
							"      const logTimestamp = log.match(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/);\r",
							"      if (!logTimestamp) return false;\r",
							"      const date = new Date(logTimestamp[0]);\r",
							"      const stateDate = new Date(stateChangeTime);\r",
							"      return date >= stateDate;\r",
							"    });\r",
							"    const logsContainingSND1 = logsAfterCurrentTime.filter((log) => {\r",
							"      return log.match(/SND 1 /);\r",
							"    });\r",
							"\r",
							"    // Check if logs after current time exist\r",
							"    pm.test(\"Logs after current time or equal contain SND 1\", function () {\r",
							"      pm.expect(response.json().logs).to.have.length.above(0);\r",
							"      pm.expect(logsContainingSND1).to.have.length.above(0);\r",
							"    });\r",
							"  });\r",
							"\r",
							"  },4000);\r",
							"\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "INIT",
					"options": {
						"raw": {
							"language": "text"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8083/state",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8083",
					"path": [
						"state"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set State to PAUSED",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Should have same last log after some time interval when state is set to PAUSED\",()=>{\r",
							"    pm.response.to.have.status(200);\r",
							"\r",
							"     let lastLog = \"\";\r",
							"    setTimeout(()=>{\r",
							"   pm.sendRequest({\r",
							"    url:\"http://localhost:8083/messages\",\r",
							"    method:\"get\"\r",
							"   },(err,response)=>{\r",
							"    if(err){\r",
							"        console.log(err)\r",
							"    }\r",
							"    lastLog = response.json().logs[response.json().logs.length-1];\r",
							"   })\r",
							"},2000)\r",
							"\r",
							"setTimeout(()=>{\r",
							"   pm.sendRequest({\r",
							"    url:\"http://localhost:8083/messages\",\r",
							"    method:\"get\"\r",
							"   },(err,response)=>{\r",
							"    if(err){\r",
							"        console.log(err)\r",
							"    }\r",
							"    let currentLastLog = response.json().logs[response.json().logs.length-1];\r",
							"    pm.expect(lastLog).to.equal(currentLastLog);\r",
							"   })\r",
							"},4000)\r",
							"\r",
							"\r",
							"})\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "PAUSED",
					"options": {
						"raw": {
							"language": "text"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8083/state",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8083",
					"path": [
						"state"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set State to RUNNING",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Should be in running state after state set to RUNNING\",()=>{\r",
							"    pm.response.to.have.status(200);\r",
							"\r",
							"    let logsSize = \"\";\r",
							"\r",
							"    pm.sendRequest({\r",
							"        url:\"http://localhost:8083/messages\",\r",
							"        method:\"get\"\r",
							"    },(err,response)=>{\r",
							"        if(err){\r",
							"            console.log(err)\r",
							"        }\r",
							"        logsSize = response.json().logs.length;\r",
							"        console.log(logsSize)\r",
							"        setTimeout(()=>{\r",
							"            pm.sendRequest({\r",
							"                url:\"http://localhost:8083/messages\",\r",
							"                method:\"get\"\r",
							"            },(err,response)=>{\r",
							"                if(err){\r",
							"                    console.log(err)\r",
							"                }\r",
							"                let currentLogSize = response.json().logs.length;\r",
							"                console.log(currentLogSize)\r",
							"                console.log(logsSize)\r",
							"                pm.expect(currentLogSize).to.be.above(logsSize);\r",
							"            })\r",
							"        },3000)\r",
							"    })\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "RUNNING",
					"options": {
						"raw": {
							"language": "text"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8083/state",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8083",
					"path": [
						"state"
					]
				}
			},
			"response": []
		},
		{
			"name": "Return RUNNING State Correctly",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Should return RUNNING state\",()=>{\r",
							"    pm.sendRequest({\r",
							"        url:\"http://localhost:8083/state\",\r",
							"        method:\"get\"\r",
							"    },(err,resp)=>{\r",
							"        console.log(resp.text())\r",
							"        pm.expect(resp.text()).to.equal(\"RUNNING\");\r",
							"    })\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "RUNNING",
					"options": {
						"raw": {
							"language": "text"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8083/state",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8083",
					"path": [
						"state"
					]
				}
			},
			"response": []
		},
		{
			"name": "Return PAUSED State Correctly",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Should return PAUSED state\",()=>{\r",
							"    pm.sendRequest({\r",
							"        url:\"http://localhost:8083/state\",\r",
							"        method:\"get\"\r",
							"    },(err,resp)=>{\r",
							"        console.log(resp.text())\r",
							"        pm.expect(resp.text()).to.equal(\"PAUSED\");\r",
							"    })\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "PAUSED",
					"options": {
						"raw": {
							"language": "text"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8083/state",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8083",
					"path": [
						"state"
					]
				}
			},
			"response": []
		},
		{
			"name": "Return Correct state for INIT request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Should return RUNNING state\",()=>{\r",
							"    pm.expect\r",
							"    pm.sendRequest({\r",
							"        url:\"http://localhost:8083/state\",\r",
							"        method:\"get\"\r",
							"    },(err,resp)=>{\r",
							"        console.log(resp.text())\r",
							"        pm.expect(resp.text()).to.equal(\"RUNNING\");\r",
							"    })\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "INIT",
					"options": {
						"raw": {
							"language": "text"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8083/state",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8083",
					"path": [
						"state"
					]
				}
			},
			"response": []
		},
		{
			"name": "Return Correct run logs",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Should log state correctly\",()=>{\r",
							"    const expectedLogs=[\r",
							"        \"RUNNING->PAUSED\",\r",
							"        \"PAUSED->RUNNING\",\r",
							"        \"RUNNING->INIT\",\r",
							"        \"INIT->RUNNING\"\r",
							"    ];\r",
							"    pm.sendRequest({\r",
							"        url:\"http://localhost:8083/state\",\r",
							"        method:\"put\",\r",
							"        body:{\r",
							"            mode:\"raw\",\r",
							"            raw:\"RUNNING\",\r",
							"            options:{\r",
							"                raw:{\r",
							"                    language:\"text\"\r",
							"                }\r",
							"            }\r",
							"        }\r",
							"    },()=>{\r",
							"       pm.sendRequest({\r",
							"        url:\"http://localhost:8083/state\",\r",
							"        method:\"put\",\r",
							"        headers:{\r",
							"            \"Content-Type\":\"application/json\"\r",
							"        },\r",
							"        body:{\r",
							"            mode:\"raw\",\r",
							"           raw:\"INIT\",\r",
							"            options:{\r",
							"                raw:{\r",
							"                    language:\"text\"\r",
							"                }\r",
							"            }\r",
							"        }\r",
							"       },(error,resp)=>{\r",
							"           pm.sendRequest({\r",
							"            url:\"http://localhost:8083/run-log\",\r",
							"            method:\"get\"\r",
							"           },(err,resp)=>{\r",
							"            let k=3;\r",
							"            console.log(resp.json().logs)\r",
							"            for(let i = resp.json().logs.length-1;i>=0;i--){\r",
							"                pm.expect(resp.json().logs[i].split(\" \")[1]).to.be.equal(expectedLogs[k]);\r",
							"                k--;\r",
							"                if(k<=-1){\r",
							"                    break;\r",
							"                }\r",
							"            }\r",
							"           })\r",
							"       })\r",
							"    })\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "PAUSED",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8083/state",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8083",
					"path": [
						"state"
					]
				}
			},
			"response": []
		}
	]
}